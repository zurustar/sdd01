name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.24'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Build with CGO disabled
      run: CGO_ENABLED=0 go build -v ./cmd/scheduler
      
    - name: Test with CGO disabled
      run: CGO_ENABLED=0 go test -v ./...
      
    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o scheduler-linux-amd64 ./cmd/scheduler
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o scheduler-darwin-amd64 ./cmd/scheduler
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o scheduler-windows-amd64.exe ./cmd/scheduler

  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        
    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.out ./...
      
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        THRESHOLD=80
        echo "Current coverage: ${COVERAGE}%"
        echo "Required threshold: ${THRESHOLD}%"
        if [ $(echo "$COVERAGE < $THRESHOLD" | awk '{print ($1 < $3)}') -eq 1 ]; then
          echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        else
          echo "Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi